name: Build Docker

on:
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:

# Cancel outdated builds when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: docker build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        id: build
        with:
          file: Dockerfile
          context: .
          # Build only amd64 for PRs to save time, both platforms for main/tags
          # Use cargo-zigbuild for all platforms (arm64 is cross-compiled for speed)
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          # Load image for testing (only for single-platform builds)
          load: ${{ github.event_name == 'pull_request' }}

      # Test that the binary starts correctly (PR builds only, since multi-platform can't be loaded)
      - name: Test Docker image startup
        if: github.event_name == 'pull_request'
        run: |
          # Extract the first tag for testing
          TEST_TAG=$(echo "${{ steps.metadata.outputs.tags }}" | head -n1)
          echo "Testing image: $TEST_TAG"

          # Test 1: Verify binary exists and is executable
          docker run --rm --entrypoint /bin/sh "$TEST_TAG" -c "test -x /app/gatehook && echo 'Binary is executable'"

          # Test 2: Run with missing env vars - should fail gracefully with error message
          # Using timeout to ensure it doesn't hang, and checking exit code
          set +e
          timeout 10s docker run --rm "$TEST_TAG" 2>&1 | tee /tmp/docker-test-output.txt
          EXIT_CODE=$?
          set -e

          # Should exit with error (non-zero) when env vars are missing
          if [ $EXIT_CODE -eq 0 ]; then
            echo "ERROR: Application should have failed without required environment variables"
            exit 1
          fi

          # Verify error message contains expected text about configuration
          if ! grep -qi "configuration\|discord_token\|webhook_url" /tmp/docker-test-output.txt; then
            echo "ERROR: Expected configuration error message not found"
            cat /tmp/docker-test-output.txt
            exit 1
          fi

          echo "âœ“ Docker image startup test passed"
